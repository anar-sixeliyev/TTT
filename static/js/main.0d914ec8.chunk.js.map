{"version":3,"sources":["logo.png","components/Square.js","components/Board.js","helpers.js","components/Game.js","components/otheroparts/Header.js","components/otheroparts/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","value","onClick","className","styleChild","width","height","display","gridTemplate","Board","squares","next","style","map","row","rowIndex","key","filter","background","column","columnIndex","calculateWinner","lines","i","length","a","b","c","includes","Game","winner","result","finalWinner","useState","Array","from","board","setBoard","fill","littleBoard","setLittleBoard","xIsNext","setXisNext","useEffect","setNext","message","setMessage","boardCopy","boardLittleCopy","console","log","item","rows","winners","Header","popupboxConfig","titleBar","enable","text","fadeIn","fadeInSpeed","header","href","src","logo","alt","loading","content","PopupboxManager","open","Footer","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0d914ec8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e6b43377.png\";","import React from 'react';\nimport './styles/squareStyle.css'\n\n/* const style = {\n    background: 'whitesmoke',\n    border: '2px solid darkblue',\n    fontSize: '20px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none',\n};*/\n\nconst Square = ({ value, onClick }) => ( \n    <button className = \"square\"\n    onClick = { onClick } > { value } \n    </button>\n)\n\nexport default Square","import React from 'react'\nimport Square from './Square';\nimport './styles/boardStyle.css'\n\nconst styleChild = {\n    width: '150px',\n    height: '150px',\n    /* margin: '0 auto', */\n    /* border: '4px solid red',\n    borderRadius: '10px', */\n    display: 'grid',\n    gridTemplate: 'repeat(3,1fr) / repeat(3,1fr)',\n}\n\nconst Board = ({ squares, onClick,next }) => {\n    return (\n        <div style={styleChild}>\n            {squares.map((row, rowIndex) => (                \n                <div key={rowIndex} style={rowIndex===next ? {filter: 'drop-shadow(5px 5px 5px rgba(0,0,0,0.9))'} : {background: 'transparent'} } className=\"board\" >\n                    {\n                        row.map((column, columnIndex) => (\n                            <Square key={columnIndex} value={column} onClick={() => onClick(rowIndex, columnIndex)} />\n                        ))\n                    }\n                </div>\n            ))}\n        </div>\n    )\n}\nexport default Board;","export function calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        /* console.log(i); */\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            /* console.log(squares[a],squares[b]); */\n            return squares[a];\n        }\n        else if(!squares.includes(null)){\n            return 'draw';\n        }\n    }\n    return null;\n}","import React, { useEffect, useState } from \"react\";\nimport Board from \"./Board\";\nimport { calculateWinner } from \"../helpers\";\nimport message from './styles/message.css'\nconst Game = () => {\n  const [board, setBoard] = useState(\n    Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => null))\n  );\n  const [littleBoard, setLittleBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXisNext] = useState(true);\n  var winner;\n  var result;\n  let finalWinner;\n  useEffect(() => {\n    // Update the document title using the browser API\n    finalWinner = calculateWinner(littleBoard);\n  },[board,setBoard] );\n\n  const [next, setNext] = useState(null);\n\n  const [message, setMessage] = useState([]);\n\n  const handleClick = (row, column) => {\n    const boardCopy = [...board];\n    const boardLittleCopy = [...littleBoard]; //Who wins small square(X,X,X), in the big table it turns into that sign(X)\n    //console.log(\"in the begiinig \" + next);\n    if (next !== null) {\n      if (row !== next) return;\n    }\n\n    winner = calculateWinner(board[row]);\n\n    if (finalWinner || boardCopy[row][column] /* || boardLittleCopy[row] */) {\n      console.log(\"end of the game, winner is \",finalWinner);\n      return; //end the game, win\n    }\n    if (winner || boardLittleCopy[row]) {\n      boardLittleCopy[row] = winner;\n      /* board[row]= board[row].fill(winner); */\n      setLittleBoard(boardLittleCopy);\n      setNext(null);\n      /* if (!message.includes({ rows: row, winners: winner })) {\n        console.log(message);\n        console.log(\"first time \" + row);\n      } */\n      message.map((item, i) => {\n        if (item.rows === row) return;\n        setMessage([...message, { rows: row, winners: winner }]);\n      });\n      return;\n    }\n\n    boardCopy[row][column] = xIsNext ? \"X\" : \"O\";\n    setBoard(boardCopy);\n    setXisNext(!xIsNext); //next = column;\n    setNext(column);\n    //console.log(\"next \" + next);//go to boardCopy[column][col]\n  };\n\n\n\n  if (finalWinner && finalWinner !== \"draw\") {\n    result = (\n      <p className=\"msg\" style={message}>\n        {\"finalWinner: \" + finalWinner}\n      </p>\n    );\n  } else if (finalWinner && finalWinner !== \"draw\" ) {\n    result = (\n      <p className=\"msg\" style={message}>\n        {\"Draw for Big game!!\"}\n      </p>\n    );\n  } else {\n    result = (\n      <p className=\"msg\" style={message}>\n        {\"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"d-flex justify-content-around\">\n      <div>\n        <Board squares={board} onClick={handleClick} next={next} style={{width:\"50%\"}} />\n      </div>\n      {result}\n      {/* <p>{finalWinner && finalWinner !== 'draw' ? 'finalWinner: ' + finalWinner : 'Next Player: ' + (xIsNext ? 'X' : 'O')}  </p> */}\n      {/* {message.length > 0 ? (\n          message.map((item, i) => {\n            return (\n              <p className=\"alert alert-primary\" key={i} role=\"alert\">\n                {\"winner of table \" + item.rows + \" is \" + item.winners}\n              </p>\n            );\n          })\n        ) : (\n          <div className=\"msg-container\" style={message} >\n            {result}\n          </div>\n        )} */}\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react'\nimport logo from '../../logo.png'\nimport header from '../styles/header.css'\nimport { PopupboxManager, PopupboxContainer } from 'react-popupbox';\nimport \"react-popupbox/dist/react-popupbox.css\"\n\nconst Header = () => {\n    //make tic tac toe more interesting and strategical\n    const openPopupbox = () => {\n        const content = (\n            <div>\n                <p>Complex XO is more tactical and strategical version of normal 3x3 tic-tac-toe game and can be played with 2 person. Such as, in this game when you put your mark on the board, you decide the area where your oppponent will play next. Let's imagine our board as a matrix. If Player-X decides to start from down-left corner of a \"big table\" and puts his/her mark in one of 9 places(for example up-left corner) in little table, next Player-O will only be able to play on the chosen area where his opponent marked earlier(Player-O can play only on table in up-left corner). This sequence continues till end of the game. If player's little table is full, they can put their mark on one of the empty slots of other little tables they choose. To make it easier next player's table will be shadowed so they can easily notice it.If none of the tables are shadowed(at start and completing of little tables), you can mark wherever you want.</p>\n                <hr/>\n                <p>Let's START</p>\n            \n            </div>\n        )\n        PopupboxManager.open({ content })\n    }\n\n    const popupboxConfig = {\n        titleBar: {\n            enable: true,\n            text: 'Rule'\n        },\n        fadeIn: true,\n        fadeInSpeed: 500\n    }\n    return (\n        <nav className=\"navbar navbar-light  header-container\" style={header}>\n            <a className=\"navbar-brand\" href=\"/\">   \n                <img src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" loading=\"lazy\" />\n                <p className=\"name\" >Complex XO</p>\n            </a>\n            <button className=\"btn btn-outline-info my-2 my-xs-0\" onClick={openPopupbox} >Guidline</button>\n            <PopupboxContainer {...popupboxConfig} />\n        </nav>\n    )\n}\nexport default Header\n","import React from 'react';\nimport footer from '../styles/footer.css'\n\nconst Footer = () => {\n    // <div style={footer} className=\"footer \" >\n    //     <h1>this is footer</h1>\n    // </div>\n    return (\n        <footer className=\"text-center text-lg-start footer\" style={footer}>\n            <div className=\"text-center p-3\">\n                  <p>© 2020 Copyright: <a className=\"text-dark\" href=\"/\">Complex.xo</a></p>\n                  <p>this game was built on react and bootstrap.</p>\n                  <p>Still on development stage.</p>\n            </div>\n      </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\nimport Header from './components/otheroparts/Header'\nimport Footer from './components/otheroparts/Footer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}